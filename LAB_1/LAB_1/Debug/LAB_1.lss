
LAB_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000810  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e4  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c4  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000156  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000197a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <LED_ON>:
int BUTTON_CHECK()
{
	uint8 B;
	B = GET_BIT(BUTTON_PIN,BUTTON);
	return B;
}
  6c:	93 9a       	sbi	0x12, 3	; 18
  6e:	08 95       	ret

00000070 <LED_OFF>:
  70:	93 98       	cbi	0x12, 3	; 18
  72:	08 95       	ret

00000074 <LED_INIT>:
  74:	8b 9a       	sbi	0x11, 3	; 17
  76:	08 95       	ret

00000078 <BUZZER_ON>:
  78:	db 9a       	sbi	0x1b, 3	; 27
  7a:	08 95       	ret

0000007c <BUZZER_OFF>:
  7c:	db 98       	cbi	0x1b, 3	; 27
  7e:	08 95       	ret

00000080 <BUZZER_INIT>:
  80:	d3 9a       	sbi	0x1a, 3	; 26
  82:	08 95       	ret

00000084 <BUTTON_INIT>:
  84:	b8 98       	cbi	0x17, 0	; 23
  86:	08 95       	ret

00000088 <main>:
#include "BUTTON_DRIVER.h"


int main(void)
{   
	BUTTON_INIT();
  88:	0e 94 42 00 	call	0x84	; 0x84 <BUTTON_INIT>
	LED_INIT();
  8c:	0e 94 3a 00 	call	0x74	; 0x74 <LED_INIT>
	BUZZER_INIT();
  90:	0e 94 40 00 	call	0x80	; 0x80 <BUZZER_INIT>
	uint8 counter=0;
  94:	c0 e0       	ldi	r28, 0x00	; 0
    
    while (1) 
    {
		if (BUTTON_CHECK()==HIGH)
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <main+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	80 e7       	ldi	r24, 0x70	; 112
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x18>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x22>
  aa:	00 00       	nop
		{
			_delay_ms(50);
			counter++;
  ac:	cf 5f       	subi	r28, 0xFF	; 255
			if ( counter < 3)
  ae:	c3 30       	cpi	r28, 0x03	; 3
  b0:	28 f4       	brcc	.+10     	; 0xbc <main+0x34>
			{
				LED_OFF();
  b2:	0e 94 38 00 	call	0x70	; 0x70 <LED_OFF>
				BUZZER_OFF();
  b6:	0e 94 3e 00 	call	0x7c	; 0x7c <BUZZER_OFF>
  ba:	ed cf       	rjmp	.-38     	; 0x96 <main+0xe>
			}
			else if ( counter == 3 )
  bc:	c3 30       	cpi	r28, 0x03	; 3
  be:	71 f4       	brne	.+28     	; 0xdc <main+0x54>
			{
				BUZZER_OFF();
  c0:	0e 94 3e 00 	call	0x7c	; 0x7c <BUZZER_OFF>
				LED_ON();
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <LED_ON>
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	83 ed       	ldi	r24, 0xD3	; 211
  cc:	90 e3       	ldi	r25, 0x30	; 48
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x46>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x50>
  d8:	00 00       	nop
  da:	dd cf       	rjmp	.-70     	; 0x96 <main+0xe>
				_delay_ms(1000);
			}
			else if ( (counter > 3) && (counter < 5)  )
  dc:	c4 30       	cpi	r28, 0x04	; 4
  de:	71 f4       	brne	.+28     	; 0xfc <main+0x74>
			{
				BUZZER_ON();
  e0:	0e 94 3c 00 	call	0x78	; 0x78 <BUZZER_ON>
				LED_ON();
  e4:	0e 94 36 00 	call	0x6c	; 0x6c <LED_ON>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	83 ed       	ldi	r24, 0xD3	; 211
  ec:	90 e3       	ldi	r25, 0x30	; 48
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x66>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x70>
  f8:	00 00       	nop
  fa:	cd cf       	rjmp	.-102    	; 0x96 <main+0xe>
				_delay_ms(1000);
			}
			else if ( counter > 5 )
  fc:	c6 30       	cpi	r28, 0x06	; 6
  fe:	70 f0       	brcs	.+28     	; 0x11c <main+0x94>
			{
				LED_OFF();
 100:	0e 94 38 00 	call	0x70	; 0x70 <LED_OFF>
				BUZZER_ON();
 104:	0e 94 3c 00 	call	0x78	; 0x78 <BUZZER_ON>
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	83 ed       	ldi	r24, 0xD3	; 211
 10c:	90 e3       	ldi	r25, 0x30	; 48
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x86>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x90>
 118:	00 00       	nop
 11a:	bd cf       	rjmp	.-134    	; 0x96 <main+0xe>
				_delay_ms(1000);
			}
			else
			{
			  	LED_OFF();
 11c:	0e 94 38 00 	call	0x70	; 0x70 <LED_OFF>
			    BUZZER_OFF();
 120:	0e 94 3e 00 	call	0x7c	; 0x7c <BUZZER_OFF>
 124:	b8 cf       	rjmp	.-144    	; 0x96 <main+0xe>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
